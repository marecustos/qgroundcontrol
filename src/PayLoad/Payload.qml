import QtQuick          2.3
import QtQuick.Window   2.2
import QtQuick.Controls 1.2

import QGroundControl               1.0
import QGroundControl.Palette       1.0
import QGroundControl.Controls      1.0
import QGroundControl.Controllers   1.0
import QGroundControl.ScreenTools   1.0
import QtQuick.Layouts  1.2

Rectangle {
    id:     setupViewPayload
    QGCPalette { id: qgcPal }
    color:  qgcPal.window
    property real _columnSpacing:       ScreenTools.defaultFontPixelHeight * 0.25
    property real _labelWidth:          ScreenTools.defaultFontPixelWidth * 28
    property real _valueWidth:          ScreenTools.defaultFontPixelWidth * 24
    property int _rowSpacing:           ScreenTools.defaultFontPixelHeight / 2
    property int _colSpacing:           ScreenTools.defaultFontPixelWidth / 2
    property real   _margins:                   ScreenTools.defaultFontPixelWidth
    property var _currentSelection:     null
    property int _firstColumnWidth:     ScreenTools.defaultFontPixelWidth * 12
    property int _secondColumnWidth:    ScreenTools.defaultFontPixelWidth * 30
    property var editingConfig : QGroundControl.linkManager.payloadConfigExist()? QGroundControl.linkManager.startConfigurationEditingPayload() :  QGroundControl.linkManager.createConfiguration(ScreenTools.isSerialAvailable ? LinkConfiguration.TypeSerial : LinkConfiguration.TypeUdp, "")
    property var  _activeJoystick:          joystickManager.activeJoystick
    property var joystickSettingsWindow: null

    PayloadController {
        id: payload_controller
    }

    Component.onCompleted:{
        console.log("payload loaded")
        _activeJoystick.setInPayloadPage(true)
        console.log(_activeJoystick.inPayloadPage)
        if (QGroundControl.linkManager.payloadConfigExist()) linksettingsLoader.subEditConfig = editingConfig
        console.log(QGroundControl.linkManager.linkConfigurations.count)
        console.log(QGroundControl.linkManager.payloadConfigExist())
        console.log(_activeJoystick)   
    }

    Component.onDestruction: {
        _activeJoystick.setInPayloadPage(false)
        if (joystickSettingsWindow != null) joystickSettingsWindow.close()
        console.log("quitting payload")
    }

    Connections {
        target: joystickSettingsWindow
        onClosing: {
            joystickSettingsWindow = null;
        }
    }


    QGCFlickable { 
        clip:               true
        anchors.fill:       parent
        contentHeight:      outerItem.height
        contentWidth:       outerItem.width

        Item {
            id:     outerItem
            width:  Math.max(setupViewPayload.width, payloadMainColoumn.width)
            height: payloadMainColoumn.height

            Column{
                id: payloadMainColoumn
                width:              setupViewPayload.width
                spacing:            ScreenTools.defaultFontPixelHeight * 0.5
                anchors.margins:    ScreenTools.defaultFontPixelWidth

                QGCGroupBox {
                    title: qsTr("Payload Communication Config")
                    anchors.margins: ScreenTools.defaultFontPixelWidth
                    anchors.horizontalCenter: parent.horizontalCenter

                    ColumnLayout {
                        spacing: _rowSpacing

                        GridLayout {
                            columns:        2
                            columnSpacing:  _colSpacing
                            rowSpacing:     _rowSpacing

                            QGCTextField {
                                id:                     nameField
                                visible: false
                                Layout.preferredWidth:  _secondColumnWidth
                                Layout.fillWidth:       true
                                text:                   "Payload Communication (Auto generated by Payload Page)"
                                placeholderText:        qsTr("Enter name")
                            }

                            QGCCheckBox {
                                Layout.columnSpan:  2
                                text:               qsTr("Automatically Connect on Start")
                                checked:            editingConfig.autoConnect
                                onCheckedChanged:   editingConfig.autoConnect = checked
                                enabled:            !editingConfig.link
                            }

                            QGCCheckBox {
                                Layout.columnSpan:  2
                                text:               qsTr("High Latency")
                                checked:            editingConfig.highLatency
                                onCheckedChanged:   editingConfig.highLatency = checked
                                enabled:            !editingConfig.link
                            }

                            QGCLabel { text: qsTr("Type") }
                            QGCComboBox {
                                Layout.preferredWidth:  _secondColumnWidth
                                Layout.fillWidth:       true
                                model:                  QGroundControl.linkManager.linkTypeStrings
                                enabled:            !editingConfig.link
                                currentIndex:           editingConfig.linkType

                                onActivated: {
                                    if (index !== editingConfig.linkType) {
                                        // Save current name
                                        var name = nameField.text
                                        // Create new link configuration
                                        editingConfig = QGroundControl.linkManager.createConfiguration(index, name)
                                    }
                                }
                            }
                        }

                        Loader {
                            id:     linksettingsLoader
                            source: subEditConfig.settingsURL
                            enabled:            !editingConfig.link

                            property var subEditConfig: editingConfig
                        }
                    }
                }

                //Row layout
                RowLayout {
                    Layout.alignment:   Qt.AlignHCenter
                    anchors.horizontalCenter:   parent.horizontalCenter
                    spacing:            _colSpacing

                    QGCButton {
                        width:      ScreenTools.defaultFontPixelWidth * 10
                        text:       editingConfig.link? qsTr("Disconnect"):qsTr("Connect")
                        enabled:    nameField.text !== ""
                        onClicked: {
                                if (!editingConfig.link)
                                {
                                    // Save editing
                                    linksettingsLoader.item.saveSettings()
                                    editingConfig.name = nameField.text
                                    if (QGroundControl.linkManager.payloadConfigExist()) {
                                        console.log(editingConfig.hostList)
                                        console.log("exist")
                                        QGroundControl.linkManager.endConfigurationEditingPayload(editingConfig)
                                    } else {
                                        console.log("config doesnt exist")
                                        // If it was edited, it's no longer "dynamic"
                                        editingConfig.dynamic = false
                                        QGroundControl.linkManager.endCreateConfigurationPayload(editingConfig)
                                    }
                                    editingConfig = QGroundControl.linkManager.createConnectedLinkPayload()
                                }
                                else {
                                    editingConfig.link.disconnect()
                                    editingConfig.linkChanged()
                                    editingConfig = QGroundControl.linkManager.startConfigurationEditingPayload()
                                    linksettingsLoader.subEditConfig = editingConfig
                                }
                            }
                    }

                }

                //-- Payload Control
                        Item {
                            id:                         payloadControlLabel
                            width:                      setupViewPayload.width * 0.8
                            height:                     controlLabel.height * 3
                            anchors.margins:            ScreenTools.defaultFontPixelWidth*2
                            anchors.horizontalCenter:   parent.horizontalCenter
                            visible:                    true
                            Row {
                                anchors.fill: parent

                                // Empty space to push the image to the right
                                Item {
                                    Layout.fillWidth: true
                                }

                                // Image on the right side with clickable area
                                MouseArea {
                                    width: 35
                                    height: payloadControlLabel.height
                                    anchors.top: parent.top
                                    anchors.right: parent.right
                                    onClicked: {
                                        console.log("joystick setting clicked")
                                        if (joystickSettingsWindow === null ) {
                                            var component = Qt.createComponent("PayloadJoystickSettings.qml");
                                            if (component.status === Component.Ready) {
                                                joystickSettingsWindow = component.createObject(null);
                                                if (joystickSettingsWindow !== null) {
                                                    joystickSettingsWindow.show();
                                                } else {
                                                    console.error("Failed to create object from component:", component.errorString());
                                                }
                                            } else if (component.status === Component.Error) {
                                                console.error("Error loading component:", component.errorString());
                                            } else {
                                                console.error("Component status:", component.status);
                                            }
                                        }
                                        else {
                                            joystickSettingsWindow.requestActivate();
                                        }
                                    }

                                    Image {
                                        anchors.top: parent.top
                                        anchors.right: parent.right
                                        source: "/qmlimages/Gears.svg"
                                        width: 35
                                        height: payloadControlLabel.height
                                        fillMode: Image.PreserveAspectFit
                                    }
                                }

                                // Label in the middle
                                QGCLabel {
                                    id: controlLabel
                                    text: qsTr("PayLoad Control")
                                    font.family: ScreenTools.demiboldFontFamily
                                    verticalAlignment: Text.AlignBottom
                                    anchors.bottom: parent.bottom
                                }
                            }

                        }
                        SeabotX{
                            
                        }

                

                //-- Payload Status
                        Item {
                            id:                         payloadStatusLabel
                            width:                      setupViewPayload.width * 0.8
                            height:                     payloadLabel.height
                            anchors.margins:            ScreenTools.defaultFontPixelWidth*2
                            anchors.horizontalCenter:   parent.horizontalCenter
                            visible:                    true
                            QGCLabel {
                                id:             payloadLabel
                                text:           qsTr("PayLoad Status")
                                font.family:    ScreenTools.demiboldFontFamily
                            }
                        }

                        PayloadStatus{
                            
                        }

                Item { width: 1; height: _margins }
            }
        }
    }
}