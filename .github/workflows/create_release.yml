name: Create Deb package Release 

on:
  pull_request:
    branches:
      - 'release/*'

defaults:
  run:
    shell: bash

env:
  SOURCE_DIR: ${{ github.workspace }}
  QT_VERSION: 5.15.2
  ARTIFACT: seabot-qgc_1.0.1_amd64.deb
  BUILD_TYPE: StableBuild

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Get all tags for correct version determination
        working-directory: ${{ github.workspace }}
        run: |
          git fetch --all --tags -f --depth 1

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: linux
          target: desktop
          dir: ${{ runner.temp }}
          modules: qtcharts qtwebengine
          setup-python: true
          
  
      - name: Install QGC source dependencies
        run: sudo apt-get install -y libsdl2-dev

      - name: Install Gstreamer
        run: sudo apt-get install -y libgstreamer-plugins-base1.0-dev libgstreamer1.0-0:amd64 libgstreamer1.0-dev

      - name: Install ccache
        run: sudo apt-get install ccache

      - name: Install post-link dependencies
        run: sudo apt-get install -y binutils patchelf

      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        run: echo "name=timestamp::$(date --utc +'%Y-%m-%d-%H;%M;%S')" >> $GITHUB_OUTPUT

      - name: ccache cache files
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: ${{ runner.os }}-ccache-

      - name: Setup ccache
        run: |
          mkdir -p ~/.ccache
          echo "base_dir = ${GITHUB_WORKSPACE}" > ~/.ccache/ccache.conf
          echo "compression = true" >> ~/.ccache/ccache.conf
          echo "compression_level = 5" >> ~/.ccache/ccache.conf
          ccache -s
          ccache -z

      - name: Create build directory
        run: mkdir ${{ runner.temp }}/shadow_build_dir

      - name: Build
        working-directory: ${{ runner.temp }}/shadow_build_dir
        run: |
          qmake -r ${SOURCE_DIR}/qgroundcontrol.pro CONFIG+=installer CONFIG+=${BUILD_TYPE}
          make -j2

      - name: ccache post-run
        run: ccache -s

      - name: Create Deb package
        working-directory: ${{ github.workspace }}
        run: |
            echo "start"
            ls
            pwd

            ${{ github.workspace }}/deploy/create_linux_appimage.sh ../ ./staging ./package;

            echo "Copy Appimage"
            mkdir -p "${{ github.workspace }}/deploy/seabot_qgc/usr/bin"
            cp -r "${{ runner.temp }}/shadow_build_dir/staging/QGroundControl" "${{ github.workspace }}/deploy/seabot_qgc/usr/bin"

            echo "Copy resources"
            mkdir -p "${{ github.workspace }}/deploy/seabot_qgc/usr/share/qgroundcontrol"
            cp -r "${{ github.workspace }}/resources/" "${{ github.workspace }}/deploy/seabot_qgc/usr/share/qgroundcontrol"

            echo "Copy icon"
            mkdir -p "${{ github.workspace }}/deploy/seabot_qgc/usr/share/pixmaps"
            cp -r "${{ github.workspace }}/resources/icons/qgroundcontrol.png" "${{ github.workspace }}/deploy/seabot_qgc/usr/share/pixmaps"

            echo "Build Debian package"
            pwd
            cd "${{ github.workspace }}/deploy"
            dpkg-deb --build seabot_qgc
            cd ..
            pwd


      - name: Save artifact
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ github.workspace }}/deploy

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: v1.0.2
          name: Seabot_QGC v1.0.2
          #body: 
          draft: false
          prerelease: false
          allowUpdates: true

      - name: Upload Deb package
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/deploy/seabot_qgc.deb
          asset_name: seabot_qgc.deb
          asset_content_type: application/octet-stream