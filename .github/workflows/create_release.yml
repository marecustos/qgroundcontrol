name: Create Release with AppImage
on:
  pull_request:
    branches:
      - 'release/*'

      defaults:
        run:
          shell: bash
      
      env:
        SOURCE_DIR:   ${{ github.workspace }}
        QT_VERSION:   5.15.2
        ARTIFACT:     QGroundControl.AppImage
        BUILD_TYPE:   ${{ fromJSON('["DailyBuild", "StableBuild"]')[ github.ref_type == 'tag' || contains(github.ref, 'Stable_' ) ] }}
      
      jobs:
        build:
          runs-on:  ubuntu-20.04
      
          steps:
            - name: Checkout repo
              uses: actions/checkout@v3
              with:
                submodules: recursive
      
            - name: Get all tags for correct version determination
              working-directory:  ${{ github.workspace }}
              run: |
                git fetch --all --tags -f --depth 1
      
            - name: Install Qt
              uses: jurplel/install-qt-action@v3
              with:
                version:      ${{ env.QT_VERSION }}
                host:         linux
                target:       desktop
                dir:          ${{ runner.temp }}
                modules:      qtcharts qtwebengine
                setup-python: true
      
            - name: Install QGC source dependencies
              run:  sudo apt-get install -y libsdl2-dev
      
            - name: Install Gstreamer
              run:  sudo apt-get install -y libgstreamer-plugins-base1.0-dev libgstreamer1.0-0:amd64 libgstreamer1.0-dev
      
            - name: Install ccache
              run:  sudo apt-get install ccache
      
            - name: Install post-link dependencies
              run:  sudo apt-get install -y binutils patchelf
      
            - name: Prepare ccache timestamp
              id: ccache_cache_timestamp
              run: echo "name=timestamp::$(date --utc +'%Y-%m-%d-%H\;%M\;%S')" >> $GITHUB_OUTPUT
      
            - name: ccache cache files
              uses: actions/cache@v3
              with:
                path:         ~/.ccache
                key:          ${{ runner.os }}-ccache-${{steps.ccache_cache_timestamp.outputs.timestamp}}
                restore-keys: ${{ runner.os }}-ccache-
      
            - name: Setup ccache
              run: |
                  mkdir -p ~/.ccache
                  echo "base_dir = ${GITHUB_WORKSPACE}" > ~/.ccache/ccache.conf
                  echo "compression = true" >> ~/.ccache/ccache.conf
                  echo "compression_level = 5" >> ~/.ccache/ccache.conf
                  ccache -s
                  ccache -z
      
            - name: Create build directory
              run:  mkdir ${{ runner.temp }}/shadow_build_dir
      
            - name: Build
              working-directory: ${{ runner.temp }}/shadow_build_dir
              run:  |
                    cmake  ${SOURCE_DIR}
                    make -j2
      
            - name: ccache post-run
              run:  ccache -s

              
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Setup QGC environment
              run: |
                # Set up your environment if needed (e.g., install dependencies)
                      
            - name: Run AppImage creation script
              run: |
                bash create_linux_appimage.sh ${SOURCE_DIR} ${{ runner.temp }}/shadow_build_dir
                      
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name: ${{ github.event.pull_request.head.ref }}
                release_name: Release ${{ github.event.pull_request.head.ref }}
                draft: false
                prerelease: false
              
            - name: Upload AppImage
              id: upload-release-asset
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ steps.create_release.outputs.upload_url }}
                asset_path: ${{ github.workspace }}
                asset_name: QGroundControl.AppImage
                asset_content_type: application/octet-stream
